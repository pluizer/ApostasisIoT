* Apostasis and IoT
  
[[images/05.png]]

** Overview

In this lesson you will learn how to connect Internet connected devices to the @postasis platform and to each other. To follow this lesson you will need:

	* an Arduino or Arduino-clone with an ESP8266 chip. Other Internet enable Arduino's work also but the steps will be different.
	* some sort of sensor, in this tutorial we'll use a light sensor
	* a breadboard
	* a 1KΩ resistor
	* a computer with a working Arduino IDE.
	  
[[images/13.png]]

** Preparing the device

   To get started with connecting to the _@postasis platform_ we must first prepare the device. This manual assumes you are using the ESP8266 compatible device. Other Internet-enabled Arduino’s or Arduino clones can be used but one must look up the documentation on how to get started oneself. A ESP8266 is recommended to keep the project and examples uniform and can be ordered quite cheaply. It has built-in Wi-Fi capabilities.

   The first step is to add NodeMCU support to de Arduino IDE which this manual assumes is already installed on your pc.
   
   * Open the Arduino IDE, click on File → Preferences and paste the url: http://arduino.esp8266.com/stable/package_esp8266com_index.json into the Additional Boards Manager Urls.
     
     [[images/01.png]]
     
   * Close the window. Click Tools → Board → Board Manager and search for esp8266 and install it.

     [[images/02.png]]

   At this point the Arduino IDE is able to upload code to boards with an ESP8266 chip. To enable it navigate to Tools → Boards and select the board you are using. Now we are ready to upload the ApostasisIoT firmware. To do so;
   
   * Navigate to https://github.com/pluizer/ApostasisIoT and download and open the ArduinoIoT.ino file in the Arduino IDE.
     
   The firmware will try to connect to a WiFi access point. We must supply it with the name and password:
   
   * Change the line "(wifi-connect \"SSID\" \"PASSWORD\")"; with your correct SSID and PASSWORD of an available Wi-Fi access-point.

   * Compile and upload the project [[images/03.png]]

   At this point the board is ready to connect to the _@postasis platform_.
   
** Live coding in Lisp

   [[images/04.png]]

   Normally we program an Arduino by writing Processing code in the IDE and then uploading it to the board. This takes some time and when exploring and playing with code this can get tedious. Luckily, after having uploaded the firmware in previous steps, the board now comes with the capability to be programmed while running in a language called Lisp (uLisp in this case). A simple way to do so is to make sure the board is connected to the computer and open the serial console with Ctrl+Shift+M.
   It is now possible to enter Lisp code and have it evaluated immediately. Go ahaid and enter ~"Hello world"~ in the console to see if it works. 
   Let's try a simple function call, enter ~(+ 5 7)~ in the serial console and press enter. If the console prints the value ~12~ you are good to go!

** Values and Functions
   
   Lisp is an easy language to learn. To follow this tutorial you do not need to know the exact workings of the code, you could just follow along. If you do wish to learn a bit more about the language here is a little primer:
 
*** Values

    Clojure's _reader_ reads code, called an _expression_ and than returns its value. Reading expressions and than and returning its value is called; _evaluating_ that expression. The most simple expression possible are just _values_ which evaluate to them self.

    For example for numbers:

    ~12~ evaluates to ~12~ and ~3.14~ evaluates to ~3.14~.

*** Functions calls
    
    An expression can also stand between parentheses, this is called a list, for example:

    #+BEGIN_SRC lisp
    (+ 12 3.14)
    #+END_SRC
    
    When Lisp's reader encounters such an expression it considers the first item of the list to evaluate to a function (more on functions later). In the last example ~+~ evaluates to a function that returns the _sum_ of its _arguments_.
    
    Everything but the first item of a list are the arguments that go in that function. Arguments are the values that the functions takes to do its work. In this example to arguments for the function ~+~ are ~12~ and ~3.14~.

    This expression than evaluates to the sum of its arguments. So ~(+ 12 3.14)~ evaluates to ~15.34~. 
    
    These lists (where the first item of the list evaluates to a function and the rest to its arguments) are called _function calls_.

    If one of the items of such a _function call_ is itself a function call the last one is evaluated first. So for example:

    #+BEGIN_SRC lisp
    (+ (+ 2 3) 4)
    #+END_SRC
    is first evaluated to
    #+BEGIN_SRC lisp
    (+ 5 4)
    #+END_SRC
    and lastly to:
    #+BEGIN_SRC lisp
    9
    #+END_SRC

    another example:
    #+BEGIN_SRC lisp
    (+ (+ 2 (+ 1 1)) (+ 3 4))
    #+END_SRC
    becomes ...
    #+BEGIN_SRC lisp
    (+ (+ 2 2) 7)
    #+END_SRC
    becomes ...
    #+BEGIN_SRC lisp
    (+ 4 7) 
    #+END_SRC
    and finally becomes ...
    #+BEGIN_SRC lisp
    13
    #+END_SRC
    
**** Exercise

     Evaluate the following expressions by hand:

    #+BEGIN_SRC lisp
    (+ 1 2)
    #+END_SRC
    
    #+BEGIN_SRC lisp
    (+ (+ 2 3) 2)
    #+END_SRC
     
    #+BEGIN_SRC lisp
    (+ (+ 2 3) 2 (+ 2 2))
    #+END_SRC
    
*** Comments    

    Anywhere the reader encounters text preceded by one or more semicolons (~;~) anything following it until the end of the line will be ignored. This is used to add human readable comments to code. For example:

    #+BEGIN_SRC lisp
    (+ 2 3) ;; this part will be ignored
    #+END_SRC
    
    will still evaluate to ~5~.
    
*** Variables
**** Let expressions

    Variables can be bounded to symbols using ~let~. An example paints a thousand words:

    #+BEGIN_SRC lisp
    (let ((a 5) (+ a 3)))
    ;;     ^       ^
    ;;     |-------------- here the value 5 is bounded to the symbol: a
    ;;             |------ here, a, stands for, 5, so this coded becomes
    (+ 5 3)
    ;; which evaluates to
    8
    #+END_SRC
    
***** Exercise

      Evaluate the following expressions by hand:
      
      #+BEGIN_SRC lisp
      (let ((a 2)) a)
      ;; ???

      (let ((apple 12)) appel)
      ;; ???

      (let ((pear 222)) (+ pear pear))
      ;; ???
      #+END_SRC
    
**** Nesting _let expressions_
    
    A _let expression_ (which is how there are called) can contain other _let expressions_, this is called nesting. for example:


    #+BEGIN_SRC lisp
    (let ((a 5)) (let ((b 3)) (+ a b)))
    ;;     ^            ^        ^ ^
    ;;     |---------------------------- here a is bounded to 5
    ;;                  |--------------- and b is bounded to 3
    ;;                           |------ a, is 5 here
    ;;                             |---- and b is 3
    ;; so this code becomes
    (+ 5 3)
    ;; which still evaluates to
    8
    #+END_SRC

    the value that is to be bound can also be an expression, for example:

    #+BEGIN_SRC lisp
    (let ((a (+ 2 3))) (+ a a))
    ;; becomes
    (let ((a 5)) (+ a a))
    ;; becomes
    (+ a a)
    ;; becomes
    10
    #+END_SRC
    
    the value that is to be bound can also contain the symbol of a previously bound value:

    #+BEGIN_SRC lisp
    (let ((a (+ 2 3))) (let ((b (+ a a))) (+ a b)))
    ;; becomes
    (let ((a 5)) (let ((b (+ a a))) (+ a b)))
    ;; becomes
    (let ((b (+ 5 5))) (+ 5 b))
    ;; becomes
    (let ((b 10)) (+ 5 b))
    ;; becomes
    (+ 5 10)
    ;; becomes
    15
    #+END_SRC

***** Exercise

      Evaluate the following expressions by hand:
      
      #+BEGIN_SRC lisp
      (let ((a 1)) (let ((b 2)) (+ a b)))
      ;; ???
      
      (let ((a 1)) (let ((b (+ a 2))) (+ a b)))
      ;; ???

      (let ((a (+ 2 2))) (let ((b (+ a a))) (+ b b)))
      ;; ???
      #+END_SRC

**** Shadowing    

     When a nested let expressions contains a symbol that was already bound the this first binding will _shadow_ the first. That means that a symbol will evaluate to its most inner binding. The outer binding are not visible anymore. To show you:

     #+BEGIN_SRC lisp
     (let ((a 4)) (let ((a 3)) a))
     ;;     ^---------------------- a, does not exist here yet
     ;;                  |--------- here a, is sill bounded to 4
     ;;                        |--- here a is bounded to 4, it shadows the a bounded to 3.
     ;; so this expression becomes
     3
     #+END_SRC
     
     Some more examples ...
     #+BEGIN_SRC lisp
     (let ((a 3)) (let ((a a)) a))
     ;; becomes
     (let ((a 3)) a)
     ;; becomes
     3

     (let ((a 3)) (let ((a (+ a a))) a))
     ;; so,...
     (let ((a 3)) (let ((a (+ a a))) a))
     ;; becomes
     (let ((a (+ 3 3))) a)
     ;; becomes
     (let ((a 6)) a)
     ;; becomes
     6
     #+END_SRC
     
*TODO: Explain about setq and defun*

** Connecting a LED

   Let's get started by connecting something to the Arduino. We'll simple by connecting a LED light.

   Note that current will flow trough the breadboard like in the following image:

   [[images/15.png]]

	* Connect the 1KΩ resistor to pin 5 of the Arduino.
	* Current flows from positive(+) to negative(-). If pin D5 is enabled we want it to flow trough the resistor then trough the led to the negative ground pin. A LED will only work in one direction, if it is placed the wrong way around it will block the current. We want the positive lead of the LED connected to the resistor and the negative to the ground. The positive lead of a LED is longer. So connect the longer lead to the resistor.
	* Connect the other leg via a wire to the ground of the Arduino.
	  
	  
   The final result should resemble this:
   
   [[images/14.png]]

** Controlling the LED

   To turn on the LED we must turn on pin 5 to which it is connected. To do so open the serial monitor in the Arduino IDE and type in the following:

~(digitalwrite 14 1)~ 

This will enable pin ~D5~ (pin D5 is 14 in Arduino, to get the names of other pins please refer to the manual that come with your controller) and if everything is working well the LED should go from off to on.

To disable the LED again enter:

~(digitalwrite 14 0)~

** Reading pins and sensors
   
   To read the value of a pin or sensor you use the built-in functions ~analogread~ and ~digitalread~. The first one reads the value of a sensor connected to a analog pin by measuring it's current. The second one either returns ~true~ if there is current running trough the pin or else ~false~ when there is none.

   If you run the function ~(digitalread 5)~ it should return ~false~ if you did not press the button in the mean time and ~true~ when the button was pressed.

   Connect a sensor, in this example we use a light sensor, to the Arduino like so:

   [[images/10.png]]
   
   * Pin S on the sensor should go to pin A0 on the Arduino.
   * Pin + on the sensor should go to VU.
   * Pin - on the sensor should go to G.
     
   It is now possible to read the value of the light sensor with the command:

   ~(analogread 4)~

   (the ESP8266 has only one analog pin called ~A0~ and called ~4~ in Arduino)

   This function should read the value from the light sensor returning a number between 0 and 1023, a higher number for more light.

** Connecting to @postasis
   
[[images/06.png]]

Now that you have some basics in Lisp it is time to make the connection to _@postasis_. It is possible to connect sensor data and other data to the virtual platform and other Arduino's.

*** Via the REST API
     
    Another way to connect to the _@postasis platform_ is by using the REST-api. Using this you can set the values of variables in the cloud. It is then possible for other to retrieve this value from other Arduino's or use it in the virtual space. This makes it a good way to connect your Arduino with those of others and to the virtual space.

    The firmware uploaded to your Arduino makes this very easy. The first step is to create a _key_ inside of the platform. How to do this is outside of the scope of this lesson, I like to refer to the _@postasis framework_ documentation to learn how to do this.

   * All keys inside _@postasis_ need a password. For demonstration purpouses a key has been created called ~button~ with the password ~1234567~. 

**** Reading values

   Values can be written to a key and they can be read from a key. It is like a variable in Processing (and lisp) but it's state is shared between other projects and Arduino's connected to _@postasis_.

   To read values associated to keys we use the ~read-value~ function. It takes the name of the key as argument. For example, to read the value currently associated to the key ~button~ we'd use ~(read-value "button")~.

**** Writing values

    Values can be written to in the same way using the ~set-value~ function. To write a value we need to also supply the password. For example to _write_ a new value (in this case ~42~) to the key ~button~ we'd use ~(set-value "button" 42 "1234567")~.


**** Connecting devices together
    
     [[images/09.png]]
     
     With the light sensor still connected to the Arduino we can read it's value each second and write is to the _@postasis platform_. 
     
     Open the serial monitor in the Arduino IDE and enter the following:

     #+BEGIN_SRC lisp
     (defun main-loop ()
       (delay 1000)
       (set-value "light" (analogread 4) "1234567")
       (main-loop))
     #+END_SRC
     
     This will read the value of the sensor each second (1000 milliseconds) and send it to the "light" variable on the _@postasis platform_. 
     
     From another Arduino it is now possible to connect to this value and react to it. If you have another Arduino left please install the _ApostasisIoT_ firmware on it and connect the LED light to it light previously shown.

     Instead of writing to the key ~light~ we are going to read it in a loop, open the open the serial monitor and type the following:

     #+BEGIN_SRC lisp
     (defun main-loop ()
       (delay 1000)
       (read-value "light" (lambda (v) (digitalwrite 14 (> 512 v))))
       (main-loop))
     #+END_SRC
     
     This will read the value of ~light~ in a loop. If this value is higher then 512 the LED will turn on and else it will turn off. When both Arduino's are powered on the LED of the Arduino will turn on if a bright light in shown on the other Arduino's sensor and will turn off if the sensor is put in the dark.
     
**** Connecting devices to the virtual space

    Like connecting devices together it is also possible to connect a device to the virtual space of _@postasis_. We will give a basic example of how to connect the light sensor to the virtual space here, for further details refer to the _Apostasis User Manual_.

    * Open the attached sample project in Unity and click add a light by right clicking in the _hierarchy_ selecting light -> spot light.
      
      We want this light to become bright if there is much light shown on the sensor and vice versa. To do so;

    * Click on _add component_ and select _new script_.

    [[images/16.png]]

    * Give a new to the script, we have used SensorReader.

    * Open the script and paste the following code:

    #+BEGIN_SRC csharp
    public class SensorReader: ApostasisBehaviour
    {

        Light light;

        void Start() {
            light = gameObject.GetComponent<Light>();
            if (light == null) {
                Debug.Log("light is null");
            }
            InvokeRepeating("GetValueFromServer", 0.0f, 1.0f);
	}

        void GetValueFromServer () {
              ReadApostasisGlobalVariableInt (“light”, OnValueReceived, ApostasisGloablVariableOwner.ServerAndClient);
	}

	void OnValueReceived (int value) {
            float intensity = (10.0f / 1024.0f) * value;
            light.intensity = intensity;
        }
    }
    #+END_SRC
    
    This code will get the value of "light" from the server every second and changes the intensity of the light accordingly. The value of the sensor will be between 0 and 1023, we convert it to a value between 0 and 10.
    Now when you start the client (@postasis -> Play as client) you can see that the light you have added reacts to the light sensor.


*** Via the OSC API

    Using the REST api it is easy to connect a sensor to the virtual space but there is lots of latency. It takes a while for the values to propagate. If a more realtime connection is wanted you can use the OSC method but the Arduino needs to be connected to the same network where the the virtual space server is running.

    It is possible to connect a sensor directly to the server via normal Arduino code. For example, to read the value of the light sensor and send it via OSC:

    * In the Arduino IDE open a new project and pate the following code:

     #+BEGIN_SRC C++
     #include <OSCMessage.h>
     #include <ESP8266WiFi.h>
     #include <WiFiUdp.h>
     #define OSC_PORT      9600
     #define LIGHT_SENSOR  A0
     #define LED_PIN       16
     #define IP_ADDRESS    "192.168.0.100"
     
     WiFiUDP udp;
     
     void connectToWifi()
     {
       WiFi.begin("SSID", "PASSWORD");
       Serial.print("connecting ");
       while (WiFi.status() != WL_CONNECTED) {
         delay(250);
         Serial.print(".");
       }
       Serial.println(" done");
     }
     
     void settle()
     {
       Serial.print("settling ");
       for (int i=0; i<20; i++) {
         delay(250);
         Serial.print(".");
       }
       Serial.println(" done");
     }
     
     void sendOsc(const char* address, int value)
     {
       Serial.print("sending "); Serial.print(address); Serial.print("\n");
       OSCMessage msg(address);
       msg.add(value);
       udp.beginPacket(IP_ADDRESS, OSC_PORT);
       msg.send(udp);
       udp.endPacket();
       msg.empty();
     }
     
     void setup()
     {
       Serial.begin(115200);
       pinMode(LED_PIN, OUTPUT);
       connectToWifi();
       settle();
     }
     
     void loop()
     {
       int value = analogRead(LIGHT_SENSOR);
       sendOsc("/light", value);
       delay(100);
     }
     #+END_SRC
      
      This code will read the value of the sensor 10 times a second and send it directly to the virtual space server via OSC under the name "/light".
      
      * Adjust the SSID and PASSWORD fields to that of your WiFi-hotspot.

      * Change the value of IP_ADDRESS to that of the local IP-Address the server is running on.
      
      * Upload the project to the Arduino

      * Now, like in the REST api, add a light to the scene and attach a new script to it. We call it MyTestClass in this example ...

      * Open the script and paste the following code:

     #+BEGIN_SRC csharp
     using System.Collections;
     using System.Collections.Generic;
     using UnityEngine;
     using Apostasis.Runtime;
     using UnityOSC;
     public class MyTestClass : ApostasisBehaviour{
     
      Light light;
     
      void Start() {
      light = gameObject.GetComponent<Light>();
      if (light == null) {
      Debug.Log("light is null");
      }
      }
     
      public ApostasisGlobalVariableReader globalReader;
      public override void OnServerOscRecieved (OscMessage oscMessage) {
            float value = oscMessage.GetFloat(0);
            float intensity = (10.0f / 1024.0f) * value;
            light.intensity = intensity;
      }
     }
     #+END_SRC
      
    With this code every time the Arduino sends a new message with the value of the light sensor, the intensity of the light is adjusted. 
    
    * Inside the inspector tell Unity to listen to the "/light" message via OSC

     [[images/08.png]]
     
    * When starting the project press Escape and click on _connect_ in the OSC window.

    [[images/17.png]]
    
    * The light should now react to the sensor.


